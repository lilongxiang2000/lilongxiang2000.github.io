[{"title":"Math.sqrt() 是如何实现的","url":"/2022/02/10/How-Math-sqrt-works/","content":"实现原理其原理很简单（牛顿迭代法），求  即为求函数  的根，其导函数为  。随意取  过点  作切线，切线的斜率为 ，切线与  轴的交点为  ，将该点  的值作为新的  ，重复上面计算，若干次后精确度就能达到很高。\n我们来验证下，假设 ， 精确值为 ，现在随便取 ，通过下表可看到，经过四次计算后精确度已经达到了小数点后 11 位。\n\n\n\n\n切线方程与  轴交点\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n代码实现function sqrt(n) {  // 随意取结果的近似值，上一次的计算结果  let result = n/2, last  do { // 通过判断两次结果的差值控制精确度    last = result // 保存上一次的计算结果    result = (result + n/result) / 2 // 新的结果  } while( Math.abs(result-last) &gt; 0.01 )  return result}\n\n\n\n\n\n\n","tags":["库函数","JavaScript"]},{"title":"排序算法总结","url":"/2022/04/29/Summary-of-Sorting-Algorithms/","content":"未完成，均为 JavaScript 版本\n冒泡排序function bubbleSort(arr) &#123;  const n = arr.length  let swapped = false  for (let i=0; i&lt;n-2; i++) &#123;    for (let j=0; j&lt;n-1-i; j++) &#123;      if (arr[j]&gt;arr[j+1]) &#123;        swapped = true\t\t  [arr[j], arr[j+1]] = [arr[j+1], arr[j]]    &#125;  &#125;  // 若未进行过交换，说明arr已经是有序的    if (!swapped) return arr  &#125;  return arr&#125;\n\n选择排序function selectSort(arr) &#123;  const n = arr.length  for (let i = 0; i &lt; n - 1; i++) &#123;    let minIndex = i    for (let j = i + 1; j &lt; n; j++) &#123;      if (arr[j] &lt; arr[minIndex]) &#123;        minIndex = j      &#125;    &#125;    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]]  &#125;  return arr&#125;\n\n插入排序function insertSort(arr) &#123;  const n = arr.length  for (let i = 0; i &lt; n; i++) &#123;    for (let j = i; i &gt; 0; j--) &#123;      if (arr[j] &lt; arr[j - 1]) &#123;        [arr[j], arr[j-1]] = [arr[j-1], arr[j]]      &#125; else break    &#125;  &#125;  return arr&#125;\n\n归并排序时间：n*log(n) 空间：n+log(n)\nfunction mergeSort(arr) &#123;  if (arr.length &lt;= 1) return arr  let middle = arr.length &gt;&gt; 1  let left = arr.slice(0, middle)  let right = arr.slice(middle)  return merge(mergeSort(left), mergeSort(right))&#125;function merge(left, right) &#123;  let result = []  while (left.length &gt; 0 &amp;&amp; right.length &gt; 0) &#123;    if (left[0] &lt; right[0]) &#123;      result.push(left.shift())    &#125; else result.push(right.shift())  &#125;  return result.concat(left, right)&#125;\n\n快排function quickSort(arr, start=0, end=arr.length-1) &#123;  if (start &gt;= end) return arr  let index = start+end &gt;&gt; 1, temp = arr[index]  [arr[index], arr[end]] = [arr[end], arr[index]]  let i = start  for (let j = start; j &lt; end; j++) &#123;    if (arr[j] &lt; temp) swap(arr, i++, j)  &#125;  [arr[i], arr[end]] = [arr[end], arr[i]]  quickSort(arr, start, i - 1)  quickSort(arr, i + 1, end)  return arr&#125;\n","tags":["JavaScript","算法"]}]